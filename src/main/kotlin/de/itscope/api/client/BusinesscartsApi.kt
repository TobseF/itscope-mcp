/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.itscope.api.client

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import de.itscope.api.dto.CartLineItemOrderContainer
import de.itscope.api.dto.CartOrder
import org.openapitools.client.infrastructure.*

class BusinesscartsApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )

    /**
     * enum for parameter optimisationStrategy
     */
    enum class OptimisationStrategyAddLineItem(val value: kotlin.String) {
        @JsonProperty(value = "manual") manual("manual"),
        @JsonProperty(value = "minprice") minprice("minprice"),
        @JsonProperty(value = "minpricepartner") minpricepartner("minpricepartner"),
        @JsonProperty(value = "minsuppliers") minsuppliers("minsuppliers")
    }


    @Throws(WebClientResponseException::class)
    fun addLineItem(cartId: kotlin.String, optimisationStrategy: OptimisationStrategyAddLineItem? = null, cartLineItemOrderContainer: CartLineItemOrderContainer? = null): Mono<Unit> {
        return addLineItemWithHttpInfo(cartId = cartId, optimisationStrategy = optimisationStrategy, cartLineItemOrderContainer = cartLineItemOrderContainer)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun addLineItemWithHttpInfo(cartId: kotlin.String, optimisationStrategy: OptimisationStrategyAddLineItem? = null, cartLineItemOrderContainer: CartLineItemOrderContainer? = null): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = addLineItemRequestConfig(cartId = cartId, optimisationStrategy = optimisationStrategy, cartLineItemOrderContainer = cartLineItemOrderContainer)
        return request<CartLineItemOrderContainer, Unit>(
            localVariableConfig
        )
    }

    fun addLineItemRequestConfig(cartId: kotlin.String, optimisationStrategy: OptimisationStrategyAddLineItem? = null, cartLineItemOrderContainer: CartLineItemOrderContainer? = null) : RequestConfig<CartLineItemOrderContainer> {
        val localVariableBody = cartLineItemOrderContainer
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (optimisationStrategy != null) {
                    put("optimisationStrategy", listOf(optimisationStrategy.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/xml"
        localVariableHeaders["Content-Type"] = "application/json"
        
        val params = mutableMapOf<String, Any>(
            "cartId" to cartId,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/business/carts/{cartId}/cartlineitems",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun archiveCart(cartId: kotlin.String): Mono<Unit> {
        return archiveCartWithHttpInfo(cartId = cartId)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun archiveCartWithHttpInfo(cartId: kotlin.String): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = archiveCartRequestConfig(cartId = cartId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun archiveCartRequestConfig(cartId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val params = mutableMapOf<String, Any>(
            "cartId" to cartId,
        )

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/business/carts/archive/{cartId}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun createCart(cartOrder: CartOrder? = null): Mono<Unit> {
        return createCartWithHttpInfo(cartOrder = cartOrder)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun createCartWithHttpInfo(cartOrder: CartOrder? = null): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = createCartRequestConfig(cartOrder = cartOrder)
        return request<CartOrder, Unit>(
            localVariableConfig
        )
    }

    fun createCartRequestConfig(cartOrder: CartOrder? = null) : RequestConfig<CartOrder> {
        val localVariableBody = cartOrder
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/xml"
        localVariableHeaders["Content-Type"] = "application/json"
        
        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/business/carts",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun editCart(cartId: kotlin.String, cartOrder: CartOrder? = null): Mono<Unit> {
        return editCartWithHttpInfo(cartId = cartId, cartOrder = cartOrder)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun editCartWithHttpInfo(cartId: kotlin.String, cartOrder: CartOrder? = null): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = editCartRequestConfig(cartId = cartId, cartOrder = cartOrder)
        return request<CartOrder, Unit>(
            localVariableConfig
        )
    }

    fun editCartRequestConfig(cartId: kotlin.String, cartOrder: CartOrder? = null) : RequestConfig<CartOrder> {
        val localVariableBody = cartOrder
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/xml"
        localVariableHeaders["Content-Type"] = "application/json"
        
        val params = mutableMapOf<String, Any>(
            "cartId" to cartId,
        )

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/business/carts/{cartId}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter view
     */
    enum class ViewGetCartInfo(val value: kotlin.String) {
        @JsonProperty(value = "cart") cart("cart"),
        @JsonProperty(value = "cartlineitems") cartlineitems("cartlineitems")
    }

    /**
     * enum for parameter type
     */
    enum class TypeGetCartInfo(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }


    @Throws(WebClientResponseException::class)
    fun getCartInfo(cartId: kotlin.String, view: ViewGetCartInfo, type: TypeGetCartInfo): Mono<Unit> {
        return getCartInfoWithHttpInfo(cartId = cartId, view = view, type = type)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun getCartInfoWithHttpInfo(cartId: kotlin.String, view: ViewGetCartInfo, type: TypeGetCartInfo): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = getCartInfoRequestConfig(cartId = cartId, view = view, type = type)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun getCartInfoRequestConfig(cartId: kotlin.String, view: ViewGetCartInfo, type: TypeGetCartInfo) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val params = mutableMapOf<String, Any>(
            "cartId" to cartId,
            "view" to view.value,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/carts/{cartId}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter view
     */
    enum class ViewListCarts(val value: kotlin.String) {
        @JsonProperty(value = "cart") cart("cart")
    }

    /**
     * enum for parameter type
     */
    enum class TypeListCarts(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }

    /**
     * enum for parameter archiv
     */
    enum class ArchivListCarts(val value: kotlin.String) {
        @JsonProperty(value = "ARCHIVED") ARCHIVED("ARCHIVED"),
        @JsonProperty(value = "NOTARCHIVED") NOTARCHIVED("NOTARCHIVED")
    }


    @Throws(WebClientResponseException::class)
    fun listCarts(view: ViewListCarts, type: TypeListCarts, archiv: ArchivListCarts? = ArchivListCarts.NOTARCHIVED, page: kotlin.Int? = 1): Mono<Unit> {
        return listCartsWithHttpInfo(view = view, type = type, archiv = archiv, page = page)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun listCartsWithHttpInfo(view: ViewListCarts, type: TypeListCarts, archiv: ArchivListCarts? = ArchivListCarts.NOTARCHIVED, page: kotlin.Int? = 1): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = listCartsRequestConfig(view = view, type = type, archiv = archiv, page = page)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun listCartsRequestConfig(view: ViewListCarts, type: TypeListCarts, archiv: ArchivListCarts? = ArchivListCarts.NOTARCHIVED, page: kotlin.Int? = 1) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (archiv != null) {
                    put("archiv", listOf(archiv.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val params = mutableMapOf<String, Any>(
            "view" to view.value,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/carts/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter optimisationStrategy
     */
    enum class OptimisationStrategyOptimise(val value: kotlin.String) {
        @JsonProperty(value = "manual") manual("manual"),
        @JsonProperty(value = "minprice") minprice("minprice"),
        @JsonProperty(value = "minpricepartner") minpricepartner("minpricepartner"),
        @JsonProperty(value = "minsuppliers") minsuppliers("minsuppliers")
    }


    @Throws(WebClientResponseException::class)
    fun optimise(cartId: kotlin.String, optimisationStrategy: OptimisationStrategyOptimise): Mono<Unit> {
        return optimiseWithHttpInfo(cartId = cartId, optimisationStrategy = optimisationStrategy)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun optimiseWithHttpInfo(cartId: kotlin.String, optimisationStrategy: OptimisationStrategyOptimise): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = optimiseRequestConfig(cartId = cartId, optimisationStrategy = optimisationStrategy)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun optimiseRequestConfig(cartId: kotlin.String, optimisationStrategy: OptimisationStrategyOptimise) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("optimisationStrategy", listOf(optimisationStrategy.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val params = mutableMapOf<String, Any>(
            "cartId" to cartId,
        )

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/business/carts/{cartId}/optimise",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun removeCart(cartId: kotlin.String): Mono<Unit> {
        return removeCartWithHttpInfo(cartId = cartId)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun removeCartWithHttpInfo(cartId: kotlin.String): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = removeCartRequestConfig(cartId = cartId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun removeCartRequestConfig(cartId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val params = mutableMapOf<String, Any>(
            "cartId" to cartId,
        )

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/business/carts/{cartId}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun removeLineItem(cartId: kotlin.String, lineItemId: kotlin.String): Mono<Unit> {
        return removeLineItemWithHttpInfo(cartId = cartId, lineItemId = lineItemId)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun removeLineItemWithHttpInfo(cartId: kotlin.String, lineItemId: kotlin.String): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = removeLineItemRequestConfig(cartId = cartId, lineItemId = lineItemId)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun removeLineItemRequestConfig(cartId: kotlin.String, lineItemId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val params = mutableMapOf<String, Any>(
            "cartId" to cartId,
            "lineItemId" to lineItemId,
        )

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/business/carts/{cartId}/cartlineitems/{lineItemId}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
