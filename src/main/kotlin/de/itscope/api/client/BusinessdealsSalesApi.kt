/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.itscope.api.client

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import de.itscope.api.dto.Deal
import org.openapitools.client.infrastructure.*

class BusinessdealsSalesApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )

    /**
     * enum for parameter view
     */
    enum class ViewGetDealList1(val value: kotlin.String) {
        @JsonProperty(value = "deal") deal("deal")
    }

    /**
     * enum for parameter type
     */
    enum class TypeGetDealList1(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }

    /**
     * enum for parameter archiv
     */
    enum class ArchivGetDealList1(val value: kotlin.String) {
        @JsonProperty(value = "ARCHIVED") ARCHIVED("ARCHIVED"),
        @JsonProperty(value = "NOTARCHIVED") NOTARCHIVED("NOTARCHIVED")
    }

    /**
     * enum for parameter sort
     */
    enum class SortGetDealList1(val value: kotlin.String) {
        @JsonProperty(value = "LAST_MODIFIED") LAST_MODIFIED("LAST_MODIFIED"),
        @JsonProperty(value = "SENT_DESC") SENT_DESC("SENT_DESC"),
        @JsonProperty(value = "SENT_ASC") SENT_ASC("SENT_ASC"),
        @JsonProperty(value = "SUPPLIER") SUPPLIER("SUPPLIER"),
        @JsonProperty(value = "ID") ID("ID")
    }

    /**
     * enum for parameter testOrder
     */
    enum class TestOrderGetDealList1(val value: kotlin.String) {
        @JsonProperty(value = "true") `true`("true"),
        @JsonProperty(value = "false") `false`("false")
    }


    @Throws(WebClientResponseException::class)
    fun getDealList1(view: ViewGetDealList1, type: TypeGetDealList1, archiv: ArchivGetDealList1, lastUpdateDateFrom: kotlin.String? = null, lastUpdateDateTo: kotlin.String? = null, sort: SortGetDealList1? = SortGetDealList1.LAST_MODIFIED, page: kotlin.Int? = 1, testOrder: TestOrderGetDealList1? = null): Mono<kotlin.collections.List<Deal>> {
        return getDealList1WithHttpInfo(view = view, type = type, archiv = archiv, lastUpdateDateFrom = lastUpdateDateFrom, lastUpdateDateTo = lastUpdateDateTo, sort = sort, page = page, testOrder = testOrder)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun getDealList1WithHttpInfo(view: ViewGetDealList1, type: TypeGetDealList1, archiv: ArchivGetDealList1, lastUpdateDateFrom: kotlin.String? = null, lastUpdateDateTo: kotlin.String? = null, sort: SortGetDealList1? = SortGetDealList1.LAST_MODIFIED, page: kotlin.Int? = 1, testOrder: TestOrderGetDealList1? = null): Mono<ResponseEntity<kotlin.collections.List<Deal>>> {
        val localVariableConfig = getDealList1RequestConfig(view = view, type = type, archiv = archiv, lastUpdateDateFrom = lastUpdateDateFrom, lastUpdateDateTo = lastUpdateDateTo, sort = sort, page = page, testOrder = testOrder)
        return request<Unit, kotlin.collections.List<Deal>>(
            localVariableConfig
        )
    }

    fun getDealList1RequestConfig(view: ViewGetDealList1, type: TypeGetDealList1, archiv: ArchivGetDealList1, lastUpdateDateFrom: kotlin.String? = null, lastUpdateDateTo: kotlin.String? = null, sort: SortGetDealList1? = SortGetDealList1.LAST_MODIFIED, page: kotlin.Int? = 1, testOrder: TestOrderGetDealList1? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (lastUpdateDateFrom != null) {
                    put("lastUpdateDateFrom", listOf(lastUpdateDateFrom.toString()))
                }
                if (lastUpdateDateTo != null) {
                    put("lastUpdateDateTo", listOf(lastUpdateDateTo.toString()))
                }
                put("archiv", listOf(archiv.toString()))
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (testOrder != null) {
                    put("testOrder", listOf(testOrder.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "view" to view.value,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/deals/sales/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun newDeal1(testOrder: kotlin.Boolean? = false, body: kotlin.Any? = null): Mono<Unit> {
        return newDeal1WithHttpInfo(testOrder = testOrder, body = body)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun newDeal1WithHttpInfo(testOrder: kotlin.Boolean? = false, body: kotlin.Any? = null): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = newDeal1RequestConfig(testOrder = testOrder, body = body)
        return request<kotlin.Any, Unit>(
            localVariableConfig
        )
    }

    fun newDeal1RequestConfig(testOrder: kotlin.Boolean? = false, body: kotlin.Any? = null) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (testOrder != null) {
                    put("testOrder", listOf(testOrder.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/xml"
        localVariableHeaders["Content-Type"] = "text/xml"
        
        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/business/deals/sales/send",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter view
     */
    enum class ViewSearchDeals(val value: kotlin.String) {
        @JsonProperty(value = "deal") deal("deal")
    }

    /**
     * enum for parameter type
     */
    enum class TypeSearchDeals(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }

    /**
     * enum for parameter archiv
     */
    enum class ArchivSearchDeals(val value: kotlin.String) {
        @JsonProperty(value = "ARCHIVED") ARCHIVED("ARCHIVED"),
        @JsonProperty(value = "NOTARCHIVED") NOTARCHIVED("NOTARCHIVED")
    }

    /**
     * enum for parameter sort
     */
    enum class SortSearchDeals(val value: kotlin.String) {
        @JsonProperty(value = "LAST_MODIFIED") LAST_MODIFIED("LAST_MODIFIED"),
        @JsonProperty(value = "DATE_DESC") DATE_DESC("DATE_DESC"),
        @JsonProperty(value = "DATE_ASC") DATE_ASC("DATE_ASC"),
        @JsonProperty(value = "SUPPLIER") SUPPLIER("SUPPLIER"),
        @JsonProperty(value = "ID") ID("ID")
    }

    /**
     * enum for parameter testOrder
     */
    enum class TestOrderSearchDeals(val value: kotlin.String) {
        @JsonProperty(value = "true") `true`("true"),
        @JsonProperty(value = "false") `false`("false")
    }


    @Throws(WebClientResponseException::class)
    fun searchDeals(view: ViewSearchDeals, type: TypeSearchDeals, filter: kotlin.String, lastUpdateDateFrom: kotlin.String? = null, lastUpdateDateTo: kotlin.String? = null, archiv: ArchivSearchDeals? = ArchivSearchDeals.NOTARCHIVED, sort: SortSearchDeals? = SortSearchDeals.LAST_MODIFIED, page: kotlin.Int? = 1, testOrder: TestOrderSearchDeals? = null): Mono<kotlin.collections.List<Deal>> {
        return searchDealsWithHttpInfo(view = view, type = type, filter = filter, lastUpdateDateFrom = lastUpdateDateFrom, lastUpdateDateTo = lastUpdateDateTo, archiv = archiv, sort = sort, page = page, testOrder = testOrder)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun searchDealsWithHttpInfo(view: ViewSearchDeals, type: TypeSearchDeals, filter: kotlin.String, lastUpdateDateFrom: kotlin.String? = null, lastUpdateDateTo: kotlin.String? = null, archiv: ArchivSearchDeals? = ArchivSearchDeals.NOTARCHIVED, sort: SortSearchDeals? = SortSearchDeals.LAST_MODIFIED, page: kotlin.Int? = 1, testOrder: TestOrderSearchDeals? = null): Mono<ResponseEntity<kotlin.collections.List<Deal>>> {
        val localVariableConfig = searchDealsRequestConfig(view = view, type = type, filter = filter, lastUpdateDateFrom = lastUpdateDateFrom, lastUpdateDateTo = lastUpdateDateTo, archiv = archiv, sort = sort, page = page, testOrder = testOrder)
        return request<Unit, kotlin.collections.List<Deal>>(
            localVariableConfig
        )
    }

    fun searchDealsRequestConfig(view: ViewSearchDeals, type: TypeSearchDeals, filter: kotlin.String, lastUpdateDateFrom: kotlin.String? = null, lastUpdateDateTo: kotlin.String? = null, archiv: ArchivSearchDeals? = ArchivSearchDeals.NOTARCHIVED, sort: SortSearchDeals? = SortSearchDeals.LAST_MODIFIED, page: kotlin.Int? = 1, testOrder: TestOrderSearchDeals? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (lastUpdateDateFrom != null) {
                    put("lastUpdateDateFrom", listOf(lastUpdateDateFrom.toString()))
                }
                if (lastUpdateDateTo != null) {
                    put("lastUpdateDateTo", listOf(lastUpdateDateTo.toString()))
                }
                if (archiv != null) {
                    put("archiv", listOf(archiv.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (testOrder != null) {
                    put("testOrder", listOf(testOrder.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "view" to view.value,
            "type" to type.value,
            "filter" to filter,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/deals/sales/search/{filter}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
