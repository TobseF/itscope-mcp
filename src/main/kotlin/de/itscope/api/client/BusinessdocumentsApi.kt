/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.itscope.api.client

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import org.openapitools.client.infrastructure.*

class BusinessdocumentsApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )

    /**
     * enum for parameter view
     */
    enum class ViewGetDocumentById(val value: kotlin.String) {
        @JsonProperty(value = "QUOTATION") QUOTATION("QUOTATION"),
        @JsonProperty(value = "ORDER") ORDER("ORDER"),
        @JsonProperty(value = "ORDERRESPONSE") ORDERRESPONSE("ORDERRESPONSE"),
        @JsonProperty(value = "DISPATCHNOTIFICATION") DISPATCHNOTIFICATION("DISPATCHNOTIFICATION"),
        @JsonProperty(value = "INVOICE") INVOICE("INVOICE")
    }

    /**
     * enum for parameter type
     */
    enum class TypeGetDocumentById(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "pdf") pdf("pdf")
    }

    /**
     * enum for parameter acceptLanguage
     */
    enum class AcceptLanguageGetDocumentById(val value: kotlin.String) {
        @JsonProperty(value = "de") de("de"),
        @JsonProperty(value = "en") en("en")
    }


    @Throws(WebClientResponseException::class)
    fun getDocumentById(transactionId: kotlin.String, view: ViewGetDocumentById, type: TypeGetDocumentById, acceptLanguage: AcceptLanguageGetDocumentById? = AcceptLanguageGetDocumentById.de): Mono<Unit> {
        return getDocumentByIdWithHttpInfo(transactionId = transactionId, view = view, type = type, acceptLanguage = acceptLanguage)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun getDocumentByIdWithHttpInfo(transactionId: kotlin.String, view: ViewGetDocumentById, type: TypeGetDocumentById, acceptLanguage: AcceptLanguageGetDocumentById? = AcceptLanguageGetDocumentById.de): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = getDocumentByIdRequestConfig(transactionId = transactionId, view = view, type = type, acceptLanguage = acceptLanguage)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun getDocumentByIdRequestConfig(transactionId: kotlin.String, view: ViewGetDocumentById, type: TypeGetDocumentById, acceptLanguage: AcceptLanguageGetDocumentById? = AcceptLanguageGetDocumentById.de) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        
        val params = mutableMapOf<String, Any>(
            "transactionId" to transactionId,
            "view" to view.value,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/documents/{transactionId}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
    enum class TypeGetDocumentsById(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "pdf") pdf("pdf")
    }

    /**
     * enum for parameter acceptLanguage
     */
    enum class AcceptLanguageGetDocumentsById(val value: kotlin.String) {
        @JsonProperty(value = "de") de("de"),
        @JsonProperty(value = "en") en("en")
    }


    @Throws(WebClientResponseException::class)
    fun getDocumentsById(orderId: kotlin.String, type: TypeGetDocumentsById, acceptLanguage: AcceptLanguageGetDocumentsById? = AcceptLanguageGetDocumentsById.de): Mono<Unit> {
        return getDocumentsByIdWithHttpInfo(orderId = orderId, type = type, acceptLanguage = acceptLanguage)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun getDocumentsByIdWithHttpInfo(orderId: kotlin.String, type: TypeGetDocumentsById, acceptLanguage: AcceptLanguageGetDocumentsById? = AcceptLanguageGetDocumentsById.de): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = getDocumentsByIdRequestConfig(orderId = orderId, type = type, acceptLanguage = acceptLanguage)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun getDocumentsByIdRequestConfig(orderId: kotlin.String, type: TypeGetDocumentsById, acceptLanguage: AcceptLanguageGetDocumentsById? = AcceptLanguageGetDocumentsById.de) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        
        val params = mutableMapOf<String, Any>(
            "orderId" to orderId,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/documents/{orderId}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun validate(body: kotlin.Any? = null): Mono<Unit> {
        return validateWithHttpInfo(body = body)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun validateWithHttpInfo(body: kotlin.Any? = null): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = validateRequestConfig(body = body)
        return request<kotlin.Any, Unit>(
            localVariableConfig
        )
    }

    fun validateRequestConfig(body: kotlin.Any? = null) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/xml"
        localVariableHeaders["Content-Type"] = "text/xml"
        
        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/business/documents/validate",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun validateBmecat12Schema(body: kotlin.Any? = null): Mono<Unit> {
        return validateBmecat12SchemaWithHttpInfo(body = body)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun validateBmecat12SchemaWithHttpInfo(body: kotlin.Any? = null): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = validateBmecat12SchemaRequestConfig(body = body)
        return request<kotlin.Any, Unit>(
            localVariableConfig
        )
    }

    fun validateBmecat12SchemaRequestConfig(body: kotlin.Any? = null) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/xml"
        localVariableHeaders["Content-Type"] = "text/xml"
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/business/documents/validateBmecat12",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun validateSchema(body: kotlin.Any? = null): Mono<Unit> {
        return validateSchemaWithHttpInfo(body = body)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun validateSchemaWithHttpInfo(body: kotlin.Any? = null): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = validateSchemaRequestConfig(body = body)
        return request<kotlin.Any, Unit>(
            localVariableConfig
        )
    }

    fun validateSchemaRequestConfig(body: kotlin.Any? = null) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/xml"
        localVariableHeaders["Content-Type"] = "text/xml"
        
        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/business/documents/validateschema",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
