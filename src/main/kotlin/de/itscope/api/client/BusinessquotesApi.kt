/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.itscope.api.client

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import de.itscope.api.dto.Quote
import org.openapitools.client.infrastructure.*

class BusinessquotesApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )

    /**
     * enum for parameter view
     */
    enum class ViewGetQuoteByQuoteId(val value: kotlin.String) {
        @JsonProperty(value = "quote") quote("quote")
    }

    /**
     * enum for parameter type
     */
    enum class TypeGetQuoteByQuoteId(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json"),
        @JsonProperty(value = "pdf") pdf("pdf")
    }


    @Throws(WebClientResponseException::class)
    fun getQuoteByQuoteId(quoteId: kotlin.String, view: ViewGetQuoteByQuoteId, type: TypeGetQuoteByQuoteId): Mono<kotlin.collections.List<Quote>> {
        return getQuoteByQuoteIdWithHttpInfo(quoteId = quoteId, view = view, type = type)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun getQuoteByQuoteIdWithHttpInfo(quoteId: kotlin.String, view: ViewGetQuoteByQuoteId, type: TypeGetQuoteByQuoteId): Mono<ResponseEntity<kotlin.collections.List<Quote>>> {
        val localVariableConfig = getQuoteByQuoteIdRequestConfig(quoteId = quoteId, view = view, type = type)
        return request<Unit, kotlin.collections.List<Quote>>(
            localVariableConfig
        )
    }

    fun getQuoteByQuoteIdRequestConfig(quoteId: kotlin.String, view: ViewGetQuoteByQuoteId, type: TypeGetQuoteByQuoteId) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "quoteId" to quoteId,
            "view" to view.value,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/quotes/{quoteId}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter view
     */
    enum class ViewGetQuoteList(val value: kotlin.String) {
        @JsonProperty(value = "quote") quote("quote")
    }

    /**
     * enum for parameter type
     */
    enum class TypeGetQuoteList(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }

    /**
     * enum for parameter archiv
     */
    enum class ArchivGetQuoteList(val value: kotlin.String) {
        @JsonProperty(value = "ARCHIVED") ARCHIVED("ARCHIVED"),
        @JsonProperty(value = "NOTARCHIVED") NOTARCHIVED("NOTARCHIVED")
    }

    /**
     * enum for parameter sort
     */
    enum class SortGetQuoteList(val value: kotlin.String) {
        @JsonProperty(value = "LAST_MODIFIED") LAST_MODIFIED("LAST_MODIFIED"),
        @JsonProperty(value = "VALID_DESC") VALID_DESC("VALID_DESC"),
        @JsonProperty(value = "VALID_ASC") VALID_ASC("VALID_ASC"),
        @JsonProperty(value = "TITLE_DESC") TITLE_DESC("TITLE_DESC"),
        @JsonProperty(value = "TITLE_ASC") TITLE_ASC("TITLE_ASC"),
        @JsonProperty(value = "ORGANISATION_DESC") ORGANISATION_DESC("ORGANISATION_DESC"),
        @JsonProperty(value = "ORGANISATION_ASC") ORGANISATION_ASC("ORGANISATION_ASC"),
        @JsonProperty(value = "DATE_DESC") DATE_DESC("DATE_DESC"),
        @JsonProperty(value = "DATE_ASC") DATE_ASC("DATE_ASC")
    }


    @Throws(WebClientResponseException::class)
    fun getQuoteList(view: ViewGetQuoteList, type: TypeGetQuoteList, archiv: ArchivGetQuoteList? = ArchivGetQuoteList.NOTARCHIVED, sort: SortGetQuoteList? = SortGetQuoteList.LAST_MODIFIED, page: kotlin.Int? = 1): Mono<kotlin.collections.List<Quote>> {
        return getQuoteListWithHttpInfo(view = view, type = type, archiv = archiv, sort = sort, page = page)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun getQuoteListWithHttpInfo(view: ViewGetQuoteList, type: TypeGetQuoteList, archiv: ArchivGetQuoteList? = ArchivGetQuoteList.NOTARCHIVED, sort: SortGetQuoteList? = SortGetQuoteList.LAST_MODIFIED, page: kotlin.Int? = 1): Mono<ResponseEntity<kotlin.collections.List<Quote>>> {
        val localVariableConfig = getQuoteListRequestConfig(view = view, type = type, archiv = archiv, sort = sort, page = page)
        return request<Unit, kotlin.collections.List<Quote>>(
            localVariableConfig
        )
    }

    fun getQuoteListRequestConfig(view: ViewGetQuoteList, type: TypeGetQuoteList, archiv: ArchivGetQuoteList? = ArchivGetQuoteList.NOTARCHIVED, sort: SortGetQuoteList? = SortGetQuoteList.LAST_MODIFIED, page: kotlin.Int? = 1) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (archiv != null) {
                    put("archiv", listOf(archiv.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "view" to view.value,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/quotes/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter view
     */
    enum class ViewSearchQuotes(val value: kotlin.String) {
        @JsonProperty(value = "quote") quote("quote")
    }

    /**
     * enum for parameter type
     */
    enum class TypeSearchQuotes(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }

    /**
     * enum for parameter archiv
     */
    enum class ArchivSearchQuotes(val value: kotlin.String) {
        @JsonProperty(value = "ARCHIVED") ARCHIVED("ARCHIVED"),
        @JsonProperty(value = "NOTARCHIVED") NOTARCHIVED("NOTARCHIVED")
    }

    /**
     * enum for parameter sort
     */
    enum class SortSearchQuotes(val value: kotlin.String) {
        @JsonProperty(value = "LAST_MODIFIED") LAST_MODIFIED("LAST_MODIFIED"),
        @JsonProperty(value = "VALID_DESC") VALID_DESC("VALID_DESC"),
        @JsonProperty(value = "VALID_ASC") VALID_ASC("VALID_ASC"),
        @JsonProperty(value = "TITLE_DESC") TITLE_DESC("TITLE_DESC"),
        @JsonProperty(value = "TITLE_ASC") TITLE_ASC("TITLE_ASC"),
        @JsonProperty(value = "ORGANISATION_DESC") ORGANISATION_DESC("ORGANISATION_DESC"),
        @JsonProperty(value = "ORGANISATION_ASC") ORGANISATION_ASC("ORGANISATION_ASC"),
        @JsonProperty(value = "DATE_DESC") DATE_DESC("DATE_DESC"),
        @JsonProperty(value = "DATE_ASC") DATE_ASC("DATE_ASC")
    }


    @Throws(WebClientResponseException::class)
    fun searchQuotes(view: ViewSearchQuotes, type: TypeSearchQuotes, filter: kotlin.String, archiv: ArchivSearchQuotes? = ArchivSearchQuotes.NOTARCHIVED, sort: SortSearchQuotes? = SortSearchQuotes.LAST_MODIFIED, page: kotlin.Int? = 1): Mono<kotlin.collections.List<Quote>> {
        return searchQuotesWithHttpInfo(view = view, type = type, filter = filter, archiv = archiv, sort = sort, page = page)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun searchQuotesWithHttpInfo(view: ViewSearchQuotes, type: TypeSearchQuotes, filter: kotlin.String, archiv: ArchivSearchQuotes? = ArchivSearchQuotes.NOTARCHIVED, sort: SortSearchQuotes? = SortSearchQuotes.LAST_MODIFIED, page: kotlin.Int? = 1): Mono<ResponseEntity<kotlin.collections.List<Quote>>> {
        val localVariableConfig = searchQuotesRequestConfig(view = view, type = type, filter = filter, archiv = archiv, sort = sort, page = page)
        return request<Unit, kotlin.collections.List<Quote>>(
            localVariableConfig
        )
    }

    fun searchQuotesRequestConfig(view: ViewSearchQuotes, type: TypeSearchQuotes, filter: kotlin.String, archiv: ArchivSearchQuotes? = ArchivSearchQuotes.NOTARCHIVED, sort: SortSearchQuotes? = SortSearchQuotes.LAST_MODIFIED, page: kotlin.Int? = 1) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (archiv != null) {
                    put("archiv", listOf(archiv.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "view" to view.value,
            "type" to type.value,
            "filter" to filter,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/business/quotes/search/{filter}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
