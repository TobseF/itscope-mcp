/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.itscope.api.client

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import de.itscope.api.dto.Company
import org.openapitools.client.infrastructure.*

class CompanyApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )

    /**
     * enum for parameter type
     */
    enum class TypeQueryDistributors(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryDistributors(val value: kotlin.String) {
        @JsonProperty(value = "company") company("company"),
        @JsonProperty(value = "eservices") eservices("eservices")
    }


    @Throws(WebClientResponseException::class)
    fun queryDistributors(type: TypeQueryDistributors, view: ViewQueryDistributors): Mono<kotlin.collections.List<Company>> {
        return queryDistributorsWithHttpInfo(type = type, view = view)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun queryDistributorsWithHttpInfo(type: TypeQueryDistributors, view: ViewQueryDistributors): Mono<ResponseEntity<kotlin.collections.List<Company>>> {
        val localVariableConfig = queryDistributorsRequestConfig(type = type, view = view)
        return request<Unit, kotlin.collections.List<Company>>(
            localVariableConfig
        )
    }

    fun queryDistributorsRequestConfig(type: TypeQueryDistributors, view: ViewQueryDistributors) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "type" to type.value,
            "view" to view.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/company/distributor/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
    enum class TypeQueryManufacturers(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryManufacturers(val value: kotlin.String) {
        @JsonProperty(value = "company") company("company"),
        @JsonProperty(value = "eservices") eservices("eservices")
    }


    @Throws(WebClientResponseException::class)
    fun queryManufacturers(type: TypeQueryManufacturers, view: ViewQueryManufacturers): Mono<kotlin.collections.List<Company>> {
        return queryManufacturersWithHttpInfo(type = type, view = view)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun queryManufacturersWithHttpInfo(type: TypeQueryManufacturers, view: ViewQueryManufacturers): Mono<ResponseEntity<kotlin.collections.List<Company>>> {
        val localVariableConfig = queryManufacturersRequestConfig(type = type, view = view)
        return request<Unit, kotlin.collections.List<Company>>(
            localVariableConfig
        )
    }

    fun queryManufacturersRequestConfig(type: TypeQueryManufacturers, view: ViewQueryManufacturers) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "type" to type.value,
            "view" to view.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/company/manufacturer/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
