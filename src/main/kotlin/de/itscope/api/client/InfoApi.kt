/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.itscope.api.client

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import org.openapitools.client.infrastructure.*

class InfoApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )


    @Throws(WebClientResponseException::class)
    fun apidoc(view: kotlin.String): Mono<Unit> {
        return apidocWithHttpInfo(view = view)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun apidocWithHttpInfo(view: kotlin.String): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = apidocRequestConfig(view = view)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun apidocRequestConfig(view: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/html, application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "view" to view,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/info/apidoc/{view}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun quota(): Mono<Unit> {
        return quotaWithHttpInfo()
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun quotaWithHttpInfo(): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = quotaRequestConfig()
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun quotaRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/info/quota",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter view
     */
    enum class ViewSchema(val value: kotlin.String) {
        @JsonProperty(value = "developer") developer("developer"),
        @JsonProperty(value = "developerUpdate") developerUpdate("developerUpdate"),
        @JsonProperty(value = "standard") standard("standard"),
        @JsonProperty(value = "standardUpdate") standardUpdate("standardUpdate"),
        @JsonProperty(value = "company") company("company"),
        @JsonProperty(value = "deal") deal("deal"),
        @JsonProperty(value = "quote") quote("quote"),
        @JsonProperty(value = "producttype") producttype("producttype"),
        @JsonProperty(value = "cart") cart("cart"),
        @JsonProperty(value = "cartlineitems") cartlineitems("cartlineitems")
    }


    @Throws(WebClientResponseException::class)
    fun schema(view: ViewSchema): Mono<Unit> {
        return schemaWithHttpInfo(view = view)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun schemaWithHttpInfo(view: ViewSchema): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = schemaRequestConfig(view = view)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun schemaRequestConfig(view: ViewSchema) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml"

        val params = mutableMapOf<String, Any>(
            "view" to view.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/info/schema/{view}.xsd",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
