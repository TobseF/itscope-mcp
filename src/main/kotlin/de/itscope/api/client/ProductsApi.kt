/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.itscope.api.client

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import de.itscope.api.dto.ProductResponse
import de.itscope.api.dto.ProductType
import org.openapitools.client.infrastructure.*

class ProductsApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )


    @Throws(WebClientResponseException::class)
    fun export(uuid: kotlin.String): Mono<Unit> {
        return exportWithHttpInfo(uuid = uuid)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun exportWithHttpInfo(uuid: kotlin.String): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = exportRequestConfig(uuid = uuid)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun exportRequestConfig(uuid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val params = mutableMapOf<String, Any>(
            "uuid" to uuid,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/products/exports/{uuid}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryDatasheetByCnetId(val value: kotlin.String) {
        @JsonProperty(value = "datasheet") datasheet("datasheet")
    }

    /**
     * enum for parameter type
     */
    enum class TypeQueryDatasheetByCnetId(val value: kotlin.String) {
        @JsonProperty(value = "html") html("html"),
        @JsonProperty(value = "pdf") pdf("pdf")
    }

    /**
     * enum for parameter language
     */
    enum class LanguageQueryDatasheetByCnetId(val value: kotlin.String) {
        @JsonProperty(value = "de") de("de"),
        @JsonProperty(value = "en") en("en"),
        @JsonProperty(value = "nl") nl("nl"),
        @JsonProperty(value = "fr") fr("fr"),
        @JsonProperty(value = "it") `it`("it"),
        @JsonProperty(value = "es") es("es")
    }

    /**
     * enum for parameter acceptLanguage
     */
    enum class AcceptLanguageQueryDatasheetByCnetId(val value: kotlin.String) {
        @JsonProperty(value = "de") de("de"),
        @JsonProperty(value = "en") en("en"),
        @JsonProperty(value = "nl") nl("nl"),
        @JsonProperty(value = "fr") fr("fr"),
        @JsonProperty(value = "it") `it`("it"),
        @JsonProperty(value = "es") es("es")
    }


    @Throws(WebClientResponseException::class)
    fun queryDatasheetByCnetId(cnetid: kotlin.String, view: ViewQueryDatasheetByCnetId, type: TypeQueryDatasheetByCnetId, language: LanguageQueryDatasheetByCnetId? = LanguageQueryDatasheetByCnetId.de, acceptLanguage: AcceptLanguageQueryDatasheetByCnetId? = AcceptLanguageQueryDatasheetByCnetId.de): Mono<Unit> {
        return queryDatasheetByCnetIdWithHttpInfo(cnetid = cnetid, view = view, type = type, language = language, acceptLanguage = acceptLanguage)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun queryDatasheetByCnetIdWithHttpInfo(cnetid: kotlin.String, view: ViewQueryDatasheetByCnetId, type: TypeQueryDatasheetByCnetId, language: LanguageQueryDatasheetByCnetId? = LanguageQueryDatasheetByCnetId.de, acceptLanguage: AcceptLanguageQueryDatasheetByCnetId? = AcceptLanguageQueryDatasheetByCnetId.de): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = queryDatasheetByCnetIdRequestConfig(cnetid = cnetid, view = view, type = type, language = language, acceptLanguage = acceptLanguage)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun queryDatasheetByCnetIdRequestConfig(cnetid: kotlin.String, view: ViewQueryDatasheetByCnetId, type: TypeQueryDatasheetByCnetId, language: LanguageQueryDatasheetByCnetId? = LanguageQueryDatasheetByCnetId.de, acceptLanguage: AcceptLanguageQueryDatasheetByCnetId? = AcceptLanguageQueryDatasheetByCnetId.de) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        
        val params = mutableMapOf<String, Any>(
            "cnetid" to cnetid,
            "view" to view.value,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/products/datasheet/cnetid/{cnetid}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryDatasheetById(val value: kotlin.String) {
        @JsonProperty(value = "datasheet") datasheet("datasheet")
    }

    /**
     * enum for parameter type
     */
    enum class TypeQueryDatasheetById(val value: kotlin.String) {
        @JsonProperty(value = "html") html("html"),
        @JsonProperty(value = "pdf") pdf("pdf")
    }

    /**
     * enum for parameter language
     */
    enum class LanguageQueryDatasheetById(val value: kotlin.String) {
        @JsonProperty(value = "de") de("de"),
        @JsonProperty(value = "en") en("en"),
        @JsonProperty(value = "nl") nl("nl"),
        @JsonProperty(value = "fr") fr("fr"),
        @JsonProperty(value = "it") `it`("it"),
        @JsonProperty(value = "es") es("es")
    }

    /**
     * enum for parameter acceptLanguage
     */
    enum class AcceptLanguageQueryDatasheetById(val value: kotlin.String) {
        @JsonProperty(value = "de") de("de"),
        @JsonProperty(value = "en") en("en"),
        @JsonProperty(value = "nl") nl("nl"),
        @JsonProperty(value = "fr") fr("fr"),
        @JsonProperty(value = "it") `it`("it"),
        @JsonProperty(value = "es") es("es")
    }


    @Throws(WebClientResponseException::class)
    fun queryDatasheetById(itscopeid: kotlin.String, view: ViewQueryDatasheetById, type: TypeQueryDatasheetById, language: LanguageQueryDatasheetById? = LanguageQueryDatasheetById.de, acceptLanguage: AcceptLanguageQueryDatasheetById? = AcceptLanguageQueryDatasheetById.de): Mono<Unit> {
        return queryDatasheetByIdWithHttpInfo(itscopeid = itscopeid, view = view, type = type, language = language, acceptLanguage = acceptLanguage)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun queryDatasheetByIdWithHttpInfo(itscopeid: kotlin.String, view: ViewQueryDatasheetById, type: TypeQueryDatasheetById, language: LanguageQueryDatasheetById? = LanguageQueryDatasheetById.de, acceptLanguage: AcceptLanguageQueryDatasheetById? = AcceptLanguageQueryDatasheetById.de): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = queryDatasheetByIdRequestConfig(itscopeid = itscopeid, view = view, type = type, language = language, acceptLanguage = acceptLanguage)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun queryDatasheetByIdRequestConfig(itscopeid: kotlin.String, view: ViewQueryDatasheetById, type: TypeQueryDatasheetById, language: LanguageQueryDatasheetById? = LanguageQueryDatasheetById.de, acceptLanguage: AcceptLanguageQueryDatasheetById? = AcceptLanguageQueryDatasheetById.de) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        
        val params = mutableMapOf<String, Any>(
            "itscopeid" to itscopeid,
            "view" to view.value,
            "type" to type.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/products/datasheet/id/{itscopeid}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
    enum class TypeQueryProductByEan(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json"),
        @JsonProperty(value = "csv") csv("csv")
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryProductByEan(val value: kotlin.String) {
        @JsonProperty(value = "developer") developer("developer"),
        @JsonProperty(value = "developerUpdate") developerUpdate("developerUpdate"),
        @JsonProperty(value = "standard") standard("standard"),
        @JsonProperty(value = "standardUpdate") standardUpdate("standardUpdate")
    }

    /**
     * enum for parameter historyAggregation
     */
    enum class HistoryAggregationQueryProductByEan(val value: kotlin.String) {
        @JsonProperty(value = "weekly") weekly("weekly"),
        @JsonProperty(value = "monthly") monthly("monthly")
    }


    @Throws(WebClientResponseException::class)
    fun queryProductByEan(ean: kotlin.String, type: TypeQueryProductByEan, view: ViewQueryProductByEan, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductByEan? = HistoryAggregationQueryProductByEan.monthly, plzproducts: kotlin.Boolean? = false, acceptLanguage: kotlin.String? = "de"): Mono<ProductResponse> {
        return queryProductByEanWithHttpInfo(ean = ean, type = type, view = view, realtime = realtime, historyFrom = historyFrom, historyTo = historyTo, historyAggregation = historyAggregation, plzproducts = plzproducts, acceptLanguage = acceptLanguage)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun queryProductByEanWithHttpInfo(ean: kotlin.String, type: TypeQueryProductByEan, view: ViewQueryProductByEan, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductByEan? = HistoryAggregationQueryProductByEan.monthly, plzproducts: kotlin.Boolean? = false, acceptLanguage: kotlin.String? = "de"): Mono<ResponseEntity<ProductResponse>> {
        val localVariableConfig = queryProductByEanRequestConfig(ean = ean, type = type, view = view, realtime = realtime, historyFrom = historyFrom, historyTo = historyTo, historyAggregation = historyAggregation, plzproducts = plzproducts, acceptLanguage = acceptLanguage)
        return request<Unit, ProductResponse>(
            localVariableConfig
        )
    }

    fun queryProductByEanRequestConfig(ean: kotlin.String, type: TypeQueryProductByEan, view: ViewQueryProductByEan, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductByEan? = HistoryAggregationQueryProductByEan.monthly, plzproducts: kotlin.Boolean? = false, acceptLanguage: kotlin.String? = "de") : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (realtime != null) {
                    put("realtime", listOf(realtime.toString()))
                }
                if (historyFrom != null) {
                    put("historyFrom", listOf(historyFrom.toString()))
                }
                if (historyTo != null) {
                    put("historyTo", listOf(historyTo.toString()))
                }
                if (historyAggregation != null) {
                    put("historyAggregation", listOf(historyAggregation.toString()))
                }
                if (plzproducts != null) {
                    put("plzproducts", listOf(plzproducts.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "ean" to ean,
            "type" to type.value,
            "view" to view.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/products/ean/{ean}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
    enum class TypeQueryProductById(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json"),
        @JsonProperty(value = "csv") csv("csv")
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryProductById(val value: kotlin.String) {
        @JsonProperty(value = "developer") developer("developer"),
        @JsonProperty(value = "developerUpdate") developerUpdate("developerUpdate"),
        @JsonProperty(value = "standard") standard("standard"),
        @JsonProperty(value = "standardUpdate") standardUpdate("standardUpdate")
    }

    /**
     * enum for parameter historyAggregation
     */
    enum class HistoryAggregationQueryProductById(val value: kotlin.String) {
        @JsonProperty(value = "weekly") weekly("weekly"),
        @JsonProperty(value = "monthly") monthly("monthly")
    }


    @Throws(WebClientResponseException::class)
    fun queryProductById(itscopeid: kotlin.String, type: TypeQueryProductById, view: ViewQueryProductById, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductById? = HistoryAggregationQueryProductById.monthly, acceptLanguage: kotlin.String? = "de"): Mono<ProductResponse> {
        return queryProductByIdWithHttpInfo(itscopeid = itscopeid, type = type, view = view, realtime = realtime, historyFrom = historyFrom, historyTo = historyTo, historyAggregation = historyAggregation, acceptLanguage = acceptLanguage)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun queryProductByIdWithHttpInfo(itscopeid: kotlin.String, type: TypeQueryProductById, view: ViewQueryProductById, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductById? = HistoryAggregationQueryProductById.monthly, acceptLanguage: kotlin.String? = "de"): Mono<ResponseEntity<ProductResponse>> {
        val localVariableConfig = queryProductByIdRequestConfig(itscopeid = itscopeid, type = type, view = view, realtime = realtime, historyFrom = historyFrom, historyTo = historyTo, historyAggregation = historyAggregation, acceptLanguage = acceptLanguage)
        return request<Unit, ProductResponse>(
            localVariableConfig
        )
    }

    fun queryProductByIdRequestConfig(itscopeid: kotlin.String, type: TypeQueryProductById, view: ViewQueryProductById, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductById? = HistoryAggregationQueryProductById.monthly, acceptLanguage: kotlin.String? = "de") : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (realtime != null) {
                    put("realtime", listOf(realtime.toString()))
                }
                if (historyFrom != null) {
                    put("historyFrom", listOf(historyFrom.toString()))
                }
                if (historyTo != null) {
                    put("historyTo", listOf(historyTo.toString()))
                }
                if (historyAggregation != null) {
                    put("historyAggregation", listOf(historyAggregation.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "itscopeid" to itscopeid,
            "type" to type.value,
            "view" to view.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/products/id/{itscopeid}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
    enum class TypeQueryProductTypes(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json")
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryProductTypes(val value: kotlin.String) {
        @JsonProperty(value = "producttype") producttype("producttype")
    }


    @Throws(WebClientResponseException::class)
    fun queryProductTypes(type: TypeQueryProductTypes, view: ViewQueryProductTypes): Mono<kotlin.collections.List<ProductType>> {
        return queryProductTypesWithHttpInfo(type = type, view = view)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun queryProductTypesWithHttpInfo(type: TypeQueryProductTypes, view: ViewQueryProductTypes): Mono<ResponseEntity<kotlin.collections.List<ProductType>>> {
        val localVariableConfig = queryProductTypesRequestConfig(type = type, view = view)
        return request<Unit, kotlin.collections.List<ProductType>>(
            localVariableConfig
        )
    }

    fun queryProductTypesRequestConfig(type: TypeQueryProductTypes, view: ViewQueryProductTypes) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "type" to type.value,
            "view" to view.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/products/producttypes/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
    enum class TypeQueryProducts(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json"),
        @JsonProperty(value = "csv") csv("csv")
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryProducts(val value: kotlin.String) {
        @JsonProperty(value = "developer") developer("developer"),
        @JsonProperty(value = "developerUpdate") developerUpdate("developerUpdate"),
        @JsonProperty(value = "standard") standard("standard"),
        @JsonProperty(value = "standardUpdate") standardUpdate("standardUpdate")
    }

    /**
     * enum for parameter historyAggregation
     */
    enum class HistoryAggregationQueryProducts(val value: kotlin.String) {
        @JsonProperty(value = "weekly") weekly("weekly"),
        @JsonProperty(value = "monthly") monthly("monthly")
    }

    /**
     * enum for parameter sort
     */
    enum class SortQueryProducts(val value: kotlin.String) {
        @JsonProperty(value = "DEFAULT") DEFAULT("DEFAULT"),
        @JsonProperty(value = "PRICE_ASC") PRICE_ASC("PRICE_ASC"),
        @JsonProperty(value = "PRICE_DESC") PRICE_DESC("PRICE_DESC"),
        @JsonProperty(value = "SOURCES_COUNT") SOURCES_COUNT("SOURCES_COUNT"),
        @JsonProperty(value = "STOCK") STOCK("STOCK"),
        @JsonProperty(value = "MANUFACTURER_SKU") MANUFACTURER_SKU("MANUFACTURER_SKU"),
        @JsonProperty(value = "NAME_ASC") NAME_ASC("NAME_ASC"),
        @JsonProperty(value = "NAME_DESC") NAME_DESC("NAME_DESC"),
        @JsonProperty(value = "QUAL") QUAL("QUAL"),
        @JsonProperty(value = "TOPSELLER") TOPSELLER("TOPSELLER"),
        @JsonProperty(value = "EXACT") EXACT("EXACT"),
        @JsonProperty(value = "IRANK") IRANK("IRANK")
    }


    @Throws(WebClientResponseException::class)
    fun queryProducts(filter: kotlin.String, type: TypeQueryProducts, view: ViewQueryProducts, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProducts? = HistoryAggregationQueryProducts.weekly, productEntryFrom: kotlin.String? = null, productEntryTo: kotlin.String? = null, plzproducts: kotlin.Boolean? = false, page: kotlin.Int? = 1, item: kotlin.Int? = 0, sort: SortQueryProducts? = SortQueryProducts.DEFAULT, acceptLanguage: kotlin.String? = "de"): Mono<ProductResponse> {
        return queryProductsWithHttpInfo(filter = filter, type = type, view = view, realtime = realtime, historyFrom = historyFrom, historyTo = historyTo, historyAggregation = historyAggregation, productEntryFrom = productEntryFrom, productEntryTo = productEntryTo, plzproducts = plzproducts, page = page, item = item, sort = sort, acceptLanguage = acceptLanguage)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun queryProductsWithHttpInfo(filter: kotlin.String, type: TypeQueryProducts, view: ViewQueryProducts, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProducts? = HistoryAggregationQueryProducts.weekly, productEntryFrom: kotlin.String? = null, productEntryTo: kotlin.String? = null, plzproducts: kotlin.Boolean? = false, page: kotlin.Int? = 1, item: kotlin.Int? = 0, sort: SortQueryProducts? = SortQueryProducts.DEFAULT, acceptLanguage: kotlin.String? = "de"): Mono<ResponseEntity<ProductResponse>> {
        val localVariableConfig = queryProductsRequestConfig(filter = filter, type = type, view = view, realtime = realtime, historyFrom = historyFrom, historyTo = historyTo, historyAggregation = historyAggregation, productEntryFrom = productEntryFrom, productEntryTo = productEntryTo, plzproducts = plzproducts, page = page, item = item, sort = sort, acceptLanguage = acceptLanguage)
        return request<Unit, ProductResponse>(
            localVariableConfig
        )
    }

    fun queryProductsRequestConfig(filter: kotlin.String, type: TypeQueryProducts, view: ViewQueryProducts, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProducts? = HistoryAggregationQueryProducts.weekly, productEntryFrom: kotlin.String? = null, productEntryTo: kotlin.String? = null, plzproducts: kotlin.Boolean? = false, page: kotlin.Int? = 1, item: kotlin.Int? = 0, sort: SortQueryProducts? = SortQueryProducts.DEFAULT, acceptLanguage: kotlin.String? = "de") : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (realtime != null) {
                    put("realtime", listOf(realtime.toString()))
                }
                if (historyFrom != null) {
                    put("historyFrom", listOf(historyFrom.toString()))
                }
                if (historyTo != null) {
                    put("historyTo", listOf(historyTo.toString()))
                }
                if (historyAggregation != null) {
                    put("historyAggregation", listOf(historyAggregation.toString()))
                }
                if (productEntryFrom != null) {
                    put("productEntryFrom", listOf(productEntryFrom.toString()))
                }
                if (productEntryTo != null) {
                    put("productEntryTo", listOf(productEntryTo.toString()))
                }
                if (plzproducts != null) {
                    put("plzproducts", listOf(plzproducts.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (item != null) {
                    put("item", listOf(item.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "filter" to filter,
            "type" to type.value,
            "view" to view.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/products/search/{filter}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
    enum class TypeQueryProductsByIds(val value: kotlin.String) {
        @JsonProperty(value = "xml") xml("xml"),
        @JsonProperty(value = "json") json("json"),
        @JsonProperty(value = "csv") csv("csv")
    }

    /**
     * enum for parameter view
     */
    enum class ViewQueryProductsByIds(val value: kotlin.String) {
        @JsonProperty(value = "developer") developer("developer"),
        @JsonProperty(value = "developerUpdate") developerUpdate("developerUpdate"),
        @JsonProperty(value = "standard") standard("standard"),
        @JsonProperty(value = "standardUpdate") standardUpdate("standardUpdate")
    }

    /**
     * enum for parameter historyAggregation
     */
    enum class HistoryAggregationQueryProductsByIds(val value: kotlin.String) {
        @JsonProperty(value = "weekly") weekly("weekly"),
        @JsonProperty(value = "monthly") monthly("monthly")
    }


    @Throws(WebClientResponseException::class)
    fun queryProductsByIds(itscopeids: kotlin.String, type: TypeQueryProductsByIds, view: ViewQueryProductsByIds, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductsByIds? = HistoryAggregationQueryProductsByIds.monthly): Mono<ProductResponse> {
        return queryProductsByIdsWithHttpInfo(itscopeids = itscopeids, type = type, view = view, realtime = realtime, historyFrom = historyFrom, historyTo = historyTo, historyAggregation = historyAggregation)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun queryProductsByIdsWithHttpInfo(itscopeids: kotlin.String, type: TypeQueryProductsByIds, view: ViewQueryProductsByIds, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductsByIds? = HistoryAggregationQueryProductsByIds.monthly): Mono<ResponseEntity<ProductResponse>> {
        val localVariableConfig = queryProductsByIdsRequestConfig(itscopeids = itscopeids, type = type, view = view, realtime = realtime, historyFrom = historyFrom, historyTo = historyTo, historyAggregation = historyAggregation)
        return request<Unit, ProductResponse>(
            localVariableConfig
        )
    }

    fun queryProductsByIdsRequestConfig(itscopeids: kotlin.String, type: TypeQueryProductsByIds, view: ViewQueryProductsByIds, realtime: kotlin.Boolean? = false, historyFrom: kotlin.String? = null, historyTo: kotlin.String? = null, historyAggregation: HistoryAggregationQueryProductsByIds? = HistoryAggregationQueryProductsByIds.monthly) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (realtime != null) {
                    put("realtime", listOf(realtime.toString()))
                }
                if (historyFrom != null) {
                    put("historyFrom", listOf(historyFrom.toString()))
                }
                if (historyTo != null) {
                    put("historyTo", listOf(historyTo.toString()))
                }
                if (historyAggregation != null) {
                    put("historyAggregation", listOf(historyAggregation.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/xml, application/json"

        val params = mutableMapOf<String, Any>(
            "itscopeids" to itscopeids,
            "type" to type.value,
            "view" to view.value,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/products/ids/{itscopeids}/{view}.{type}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
